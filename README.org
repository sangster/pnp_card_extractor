#+TITLE: PNP Card Extractor

* Introduction

This project extracts individual PNG files for cards within a "print and play"
PDF file.

[[https://nullsignal.games][Null Signal Games]] graciously provides "print and play" PDF files for each of
their published card packs. These PDF files allow players, whom cannot get
official cards, to print their own cards at home (or from a 3rd-party service).

Please support *Null Signal Games* if you can. They are a non-profit group
designing and publishing new card packs, compatible with _Android: Netrunner_,
which was cancelled in 2018.

* Features

- Instead of rendering the entire PDF as an image, and cutting out the images,
  this project uses [[https://poppler.freedesktop.org/][poppler]] to extract the embedded image data from the PDF
  itself.
- Uses the [[https://netrunnerdb.com/api/2.0/doc][NetrunnerDB API]] to fetch information about extracted cards:
  - API data can be used to automatically name the exported image.
  - API data can be stored as metadata in the PNG files.
- API information is cached on disk, to make extraction faster and avoid
  hammering the API.

* Usage

If you only care about extracting the card images, you can just pass the PDF
filename. Images will be extracted into =Page N= subdirectories, depending on
which page they came from.

#+begin_src sh
  pnp_card_extractor input.pdf
  pnp_card_extractor input.pdf --directory=/export/to/dir/
#+end_src

By default, the first page is skipped, as nearly every Print and Play PDF
includes a title page; however, you can include the first page, or specify the
exact pages to process:

#+begin_src sh
  pnp_card_extractor input.pdf --pages=1-
  pnp_card_extractor input.pdf --pages=1-5,8,10,20-30
#+end_src

** Metadata

By default, cards are exported with sequential filenames, like =Page 1/Card
1.png=, =Page 1/Card 2.png=, â€¦. If you provide the "pack code" for the card pack
in your PDF files, metadata from NetrunnerDB can be used to give the PNG files
names based on the cards:

#+begin_src  sh
  pnp_card_extractor system-gateway.pdf --pack-code=sg
#+end_src

The pack codes come from NetrunneDB, but you can print a full list, in order of
when they were published:

#+begin_src sh
  pnp_card_extractor --list-card-packs
#+end_src

If metadata is available, cards will be saved in a format similar to
=CycleName/CardPackName/CardCode CardName.png=. If you prefer something else,
you can provide a template string using whatever metadata is available from the
API, for example:

#+begin_src sh
  pnp_card_extractor input.pdf -c sg --card-template="cards/{faction.name}/{code}.png"
#+end_src

If metadata is available, it will also be included in the exported PNG files, as
PNG properties prefixed with =netrunner:=.

*** Metadata complications

When extracting cards, with metadata available, its assumed that the first card
in the PDF file is the first card from the pack, the second card in the PDF is
the second from the pack, and so on. Most print and play PDFs are like this, but
a few have out-of-order cards:

- When a card pack includes a flippable identity, that card will have multiple
  images in the PDF.
- Some PDFs have all the identities at the front, regardless of their position
  in the card pack.

In cases where the PDF file has cards in a non-sequential order, you can specify
that ordering:

#+begin_src sh
  pnp_card_extractor input.pdf -c sg --card-order=31-40,1-10,11,11,12-30
#+end_src

* Specific examples

Here are a few example using previously published print and play PDFs. They
demonstrate how to process PDFs with unusual layouts or with extra cards.

The A4-format versions of these PDFs are used in these examples, but the
letter-format PDFs should work the same way, with the same arguments.

** UprisingRemasteredEdition-English-A4\ Printable-Sheets-1x.pdf

Uprising has two flippable identity cards: one Runner and one Corp.

#+begin_src sh
  pnp_card_extractor UprisingRemasteredEdition-English-A4\ Printable-Sheets-1x.pdf \
    --pack-code=ur --card-order=66,66-120,120-
#+end_src

** ParhelionEnglish-A4-Printable-Sheets-1x-1.pdf

For the Parhelion PDF, we need to specify the card order, because [[https://netrunnerdb.com/en/card/33094][Matryoshka]]
appears 6 times in a row. Each version of this card has different flavour text.

#+begin_src sh
  pnp_card_extractor ParhelionEnglish-A4-Printable-Sheets-1x-1.pdf \
    --pack-code=ph --card-order=-93,94,94,94,94,94,94,95-
#+end_src

** Midnight-Sun-Final-PNP-A4-English-1x.pdf

The Midnight Sun PDF has no title page, and has extra cards both at the start
and end of the PDF.

#+begin_src sh
  pnp_card_extractor Midnight-Sun-Final-PNP-A4-English-1x.pdf \
    --pack-code=ms --pages=1- --extra-start=13 --extra-end=2
#+end_src

** Elevation-1x-A4-print-and-play-PDF.pdf

The PDF for Elevation is complex for multiple reason:

- It begins with 18 extra cards, describing various game rules.
- The identities are all near the start of the file, regardless of their pack
  position.
- Many identities have 2 variants. A couple have 3.

#+begin_src sh
  pnp_card_extractor Elevation-1x-A4-print-and-play-PDF.pdf \
    --pack-code=elev --extra-start=18 \
    --card-order=-2,12-13,23,23-24,35-36,46-47,57,57-58,68-69,1-2,12-13,23-24,35-36,46-47,57-58,68-69,3-11,14-22,25-34,37-45,48-56,59-67,70-
#+end_src

* Dependencies

This is a ruby application that doesn't rely on any external applications. Its
dependencies can be installed with [[https://bundler.io/][bundler]]; however, the [[https://github.com/ruby-gnome/ruby-gnome/tree/main/poppler][poppler]] gem builds a
native extension and you may need the poppler and GObject-Introspection
libraries available on your machine.

[[https://nixos.org/][Nix]] users can use the included [[file:flake.nix][flake.nix]] to build or run this project:

#+begin_src sh
  nix run github:sangster/pnp_card_extractor
#+end_src

* Thanks

- [[https://github.com/gcoulby/NSG-netrunner-card-extractor][github:gcoulby/NSG-netrunner-card-extractor]] :: The python script that inspired
  this project.
- [[https://nullsignal.games][Null Signal Games]] :: Keeping Netrunner alive!

* TODO

- Support [[https://netrunnerdb.com/en/print/][on-the-fly print and play]] PDFs, generated by NetrunnerDB. Extracting
  the card images should be easy, as they're individually embedded in the PDF;
  however, I need a way to reliably detect when a PDF was generated by
  NetrunneDB.

* Current --help output

#+begin_src
  Usage: ./bin/pnp_card_extractor [OPTIONS] PDF_FILE

  OPTIONS

      -p, --pages=NUMBERS              The pages to extract cards from. See NUMBERS section. (Default: 2-)
      -f, --force                      Overwrite existing files.
      -d, --directory=DIRECTORY        Directory to export cards into. Will be ignored if --filename-template
                                       defines an absolute path. (Default: ./)
      -m, --margins=MARGINS            Use the given margins ("top,right,bottom,left"), instead of measuring.
      -M, --measure-all-margins        Instead of assuming they're all equal, measure each margin on every page.
      -s, --silent                     Do not print any logging messages.
      -v, --verbose [LEVEL]            Increase verbosity (can be repeated)
                                       or set to one of debug, info, warn, error, fatal, unknown

  METADATA

      -a, --api=URI                    NetrunnerDB API to fetch metadata from.
                                       (Default: https://netrunnerdb.com/api/2.0/public/)
      -c, --pack-code=CODE             NetrunnerDB card pack code.
      -o, --card-order=NUMBERS         The card numbers found in the PDF. See NUMBERS and CARD ORDER sections.
                                       (Default: -)
      -e, --extra-start=NUM            Extra, non-playing cards at the start of the PDF.
                                       See EXTRA CARDS section. (Default: 0)
      -E, --extra-end=NUM              Extra, non-playing cards at the end of the PDF.
                                       See EXTRA CARDS section. (Default: 0)
      -t, --card-template=TEMPLATE     The filename template for extracted card PNG files.
                                       See FILENAME TEMPLATE section.
      -T, --extra-template=TEMPLATE    The filename template for extracted non-playing-card PNG files.
                                       See FILENAME TEMPLATE section.
      -C, --cache-directory=CODE       Directory to store cached metadata in.
                                       (Default: $XDG_CACHE_HOME/pnp_card_extractor/ or ~/.cache/pnp_card_extractor/)
          --no-disk-cache              Do not use disk cache.
          --offline                    Do not use NetrunnerDB API.

  OTHER RUN-MODES
          --list-card-packs            Print the available card packs and quit.

  NUMBERS

  Some command-line arguments ask for a list of numbers. You can provide
  a list of "items," separated by either commas or spaces. Each item in
  the list must be either an integer, or a range: two integers separated
  by a dash. Both integers in a range are optional. If the left integer
  is missing, the beginning of the range will be used; if the right is
  missing, the end of the range will be used.

  Example ranges (excluding quotation marks):

    "-10,15,16,20-"
    "1 2 3 10-20 21"
    "10-"
    "-20"
    "-"

  FILENAME TEMPLATE

  If Netrunner metadata is available, either cached or from the
  NetrunnerDB API, you can use that metadata in the filenames of
  exported card images. To use a variable, justs put the variable name
  inside of curly braces. You can use dot-notation for nested variables.

  For this feature to work, you need to set --pack-code, to identify the
  pack. Also, if the cards in the PDF don't start with Card #1 from that
  pack, use --card-offset.

  If metadata is available, the default template for playing cards will be:

    {cycle.position} {cycle.name}/{pack.position} {pack.name}/{code}{is_variant ? "-"}{is_variant ? variant_position} {stripped_title}.png

  If metadata is available, the default template for extra cards will be:

    {cycle.position} {cycle.name}/{pack.position} {pack.name}/extra-cards/Page {page_number} Card {card_number}.png

  If metadata isn't available, the default template will be:

    Page {page_number}/Card {card_number}.png

  The metadata available depends on what data is returned from the
  Netrunner API, but here are some examples:

    {base_link} :: The base link of an identity.
    {code} :: A unique identifier for the card.
    {cycle.code} :: A unique identifier for the card's cycle.
    {cycle.name} :: The name of the card's cycle.
    {cycle.size} :: The number of sets in the cycle.
    {deck_limit} :: The max number per deck.
    {faction.code} :: A unique identifier for the card's faction.
    {faction.color} :: A color (hex-format) identifying the faction.
    {faction.is_mini} :: Is it a mini-faction?
    {faction.is_neutral} :: Is it a neutral card?
    {faction.name} :: The name of the card's faction.
    {flavor} :: Flavor text on the card.
    {illustrator} :: Who drew the card art.
    {influence_limit} :: The card's influence limit.
    {is_variant} :: If there are multiple versions of this card.
    {keywords} :: The cards keywords, separated by dashes.
    {minimum_deck_size} :: The identity's minimum deck size.
    {pack.code} :: A unique identifier for the card's pack.
    {pack.date_released} :: When the pack was published.
    {pack.name} :: The name of the pack.
    {pack.size} :: The number of cards in the pack.
    {position} :: The card's position in its pack.
    {quantity} :: The number of copies included in the card's pack.
    {side.code} :: A unique identifier for the card's side
    {side.name} :: Either "Runner" or "Corp"
    {stripped_text} :: Same as {text} without formatting tags.
    {stripped_title} :: Same as {title} without formatting tags.
    {text} :: The text written in the card's body.
    {title} :: The text at the top of the card.
    {type.code} :: A unique identifier for the card's type.
    {type.is_subtype} :: If it's a subtype.
    {type.name} :: The name of the card's type
    {uniqueness} :: If only one instance can be in play at once.
    {variant_position} :: The card's position among its own variants.

  CARD ORDER

  Every card in each cycle is uniquely numbered and in most PDFs, the
  first card is numbered 1 and each card that follows is subsequently
  numbered. That isn't always true though. Some cycles include multiple
  packs, so a PDF will begin with a card greater than 1. Moreover, some
  PDFs include variations on a single card, and other PDFs aren't
  ordered sequentially.

  EXTRA CARDS

  Some PDF include extra cards at the beginning and/or end of the PDF.
  These aren't playing cards, but may include information about new
  rules or game characters. They can still be exported, but will have
  access to less metadata. For instance, they don't have titles or other
  card-specific data.
#+end_src
